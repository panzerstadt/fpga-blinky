
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Parsing `top.v' using frontend `verilog' --

1. Executing Verilog-2005 frontend: top.v
Parsing Verilog input from `top.v' to AST representation.
Generating RTLIL representation for module `\top'.
Generating RTLIL representation for module `\top$pulser'.
Generating RTLIL representation for module `\top$pulser$shot'.
Generating RTLIL representation for module `\top$pulser$shot$counter'.
Generating RTLIL representation for module `\top$pulser$shot$state'.
Generating RTLIL representation for module `\top$pulser$strobe'.
Generating RTLIL representation for module `\top$pulser$strobe$counter'.
Successfully finished Verilog frontend.

-- Running command ` synth_ice40 -top top -json top.json' --

2. Executing SYNTH_ICE40 pass.

2.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Successfully finished Verilog frontend.

2.2. Executing HIERARCHY pass (managing design hierarchy).

2.2.1. Analyzing design hierarchy..
Top module:  \top
Used module:     \top$pulser
Used module:         \top$pulser$shot
Used module:             \top$pulser$shot$state
Used module:             \top$pulser$shot$counter
Used module:         \top$pulser$strobe
Used module:             \top$pulser$strobe$counter

2.2.2. Analyzing design hierarchy..
Top module:  \top
Used module:     \top$pulser
Used module:         \top$pulser$shot
Used module:             \top$pulser$shot$state
Used module:             \top$pulser$shot$counter
Used module:         \top$pulser$strobe
Used module:             \top$pulser$strobe$counter
Removed 0 unused modules.

2.3. Executing PROC pass (convert processes to netlists).

2.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 2 switch rules as full_case in process $proc$top.v:191$25 in module top$pulser$strobe.
Marked 3 switch rules as full_case in process $proc$top.v:107$9 in module top$pulser$shot.
Marked 1 switch rules as full_case in process $proc$top.v:22$1 in module top.
Removed a total of 0 dead cases.

2.3.3. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\top$pulser$strobe$counter.$proc$top.v:214$34'.
  Set init value: \q = 0
Found init rule in `\top$pulser$shot$state.$proc$top.v:157$24'.
  Set init value: \q = 1'0
Found init rule in `\top$pulser$shot$counter.$proc$top.v:138$22'.
  Set init value: \q = 0

2.3.4. Executing PROC_ARST pass (detect async resets in processes).

2.3.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\top$pulser$strobe$counter.$proc$top.v:214$34'.
     1/1: $1\q[31:0]
Creating decoders for process `\top$pulser$strobe$counter.$proc$top.v:218$33'.
     1/1: $0\q[31:0]
Creating decoders for process `\top$pulser$strobe.$proc$top.v:191$25'.
     1/5: $2\counter$d[31:0]$32
     2/5: $1\counter$d[31:0]$28
     3/5: $0\counter$d[31:0]$27
     4/5: $0\strobe[0:0]
     5/5: $0\counter$clock[0:0]$26
Creating decoders for process `\top$pulser$shot$state.$proc$top.v:157$24'.
     1/1: $1\q[0:0]
Creating decoders for process `\top$pulser$shot$state.$proc$top.v:161$23'.
     1/1: $0\q[0:0]
Creating decoders for process `\top$pulser$shot$counter.$proc$top.v:138$22'.
     1/1: $1\q[31:0]
Creating decoders for process `\top$pulser$shot$counter.$proc$top.v:142$21'.
     1/1: $0\q[31:0]
Creating decoders for process `\top$pulser$shot.$proc$top.v:107$9'.
     1/11: $2\counter$d[31:0]$20
     2/11: $2\state$d[0:0]$19
     3/11: $1\fired[0:0]
     4/11: $1\state$d[0:0]$18
     5/11: $1\counter$d[31:0]$14
     6/11: $0\counter$d[31:0]$13
     7/11: $0\state$d[0:0]$11
     8/11: $0\active[0:0]
     9/11: $0\fired[0:0]
    10/11: $0\state$clock[0:0]$12
    11/11: $0\counter$clock[0:0]$10
Creating decoders for process `\top$pulser.$proc$top.v:64$4'.
     1/5: $0\pulse[0:0]
     2/5: $0\shot$trigger[0:0]$6
     3/5: $0\strobe$enable[0:0]$5
     4/5: $0\shot$clock[0:0]$7
     5/5: $0\strobe$clock[0:0]$8
Creating decoders for process `\top.$proc$top.v:22$1'.
     1/4: $1\leds[7:0]
     2/4: $0\leds[7:0]
     3/4: $0\pulser$clock[0:0]$2
     4/4: $0\pulser$enable[0:0]$3

2.3.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\top$pulser$strobe.\strobe' from process `\top$pulser$strobe.$proc$top.v:191$25'.
No latch inferred for signal `\top$pulser$strobe.\counter$clock' from process `\top$pulser$strobe.$proc$top.v:191$25'.
No latch inferred for signal `\top$pulser$strobe.\counter$d' from process `\top$pulser$strobe.$proc$top.v:191$25'.
No latch inferred for signal `\top$pulser$shot.\active' from process `\top$pulser$shot.$proc$top.v:107$9'.
No latch inferred for signal `\top$pulser$shot.\fired' from process `\top$pulser$shot.$proc$top.v:107$9'.
No latch inferred for signal `\top$pulser$shot.\counter$clock' from process `\top$pulser$shot.$proc$top.v:107$9'.
No latch inferred for signal `\top$pulser$shot.\state$d' from process `\top$pulser$shot.$proc$top.v:107$9'.
No latch inferred for signal `\top$pulser$shot.\state$clock' from process `\top$pulser$shot.$proc$top.v:107$9'.
No latch inferred for signal `\top$pulser$shot.\counter$d' from process `\top$pulser$shot.$proc$top.v:107$9'.
No latch inferred for signal `\top$pulser.\pulse' from process `\top$pulser.$proc$top.v:64$4'.
No latch inferred for signal `\top$pulser.\strobe$enable' from process `\top$pulser.$proc$top.v:64$4'.
No latch inferred for signal `\top$pulser.\shot$trigger' from process `\top$pulser.$proc$top.v:64$4'.
No latch inferred for signal `\top$pulser.\shot$clock' from process `\top$pulser.$proc$top.v:64$4'.
No latch inferred for signal `\top$pulser.\strobe$clock' from process `\top$pulser.$proc$top.v:64$4'.
No latch inferred for signal `\top.\leds' from process `\top.$proc$top.v:22$1'.
No latch inferred for signal `\top.\pulser$clock' from process `\top.$proc$top.v:22$1'.
No latch inferred for signal `\top.\pulser$enable' from process `\top.$proc$top.v:22$1'.

2.3.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\top$pulser$strobe$counter.\q' using process `\top$pulser$strobe$counter.$proc$top.v:218$33'.
  created $dff cell `$procdff$59' with positive edge clock.
Creating register for signal `\top$pulser$shot$state.\q' using process `\top$pulser$shot$state.$proc$top.v:161$23'.
  created $dff cell `$procdff$60' with positive edge clock.
Creating register for signal `\top$pulser$shot$counter.\q' using process `\top$pulser$shot$counter.$proc$top.v:142$21'.
  created $dff cell `$procdff$61' with positive edge clock.

2.3.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `top$pulser$strobe$counter.$proc$top.v:214$34'.
Removing empty process `top$pulser$strobe$counter.$proc$top.v:218$33'.
Found and cleaned up 2 empty switches in `\top$pulser$strobe.$proc$top.v:191$25'.
Removing empty process `top$pulser$strobe.$proc$top.v:191$25'.
Removing empty process `top$pulser$shot$state.$proc$top.v:157$24'.
Removing empty process `top$pulser$shot$state.$proc$top.v:161$23'.
Removing empty process `top$pulser$shot$counter.$proc$top.v:138$22'.
Removing empty process `top$pulser$shot$counter.$proc$top.v:142$21'.
Found and cleaned up 3 empty switches in `\top$pulser$shot.$proc$top.v:107$9'.
Removing empty process `top$pulser$shot.$proc$top.v:107$9'.
Removing empty process `top$pulser.$proc$top.v:64$4'.
Found and cleaned up 1 empty switch in `\top.$proc$top.v:22$1'.
Removing empty process `top.$proc$top.v:22$1'.
Cleaned up 6 empty switches.

2.4. Executing FLATTEN pass (flatten design).
Using template top$pulser for cells of type top$pulser.
Using template top$pulser$strobe for cells of type top$pulser$strobe.
Using template top$pulser$shot for cells of type top$pulser$shot.
Using template top$pulser$strobe$counter for cells of type top$pulser$strobe$counter.
Using template top$pulser$shot$state for cells of type top$pulser$shot$state.
Using template top$pulser$shot$counter for cells of type top$pulser$shot$counter.
<suppressed ~6 debug messages>
No more expansions possible.
Deleting now unused module top$pulser$strobe$counter.
Deleting now unused module top$pulser$strobe.
Deleting now unused module top$pulser$shot$state.
Deleting now unused module top$pulser$shot$counter.
Deleting now unused module top$pulser$shot.
Deleting now unused module top$pulser.

2.5. Executing TRIBUF pass.

2.6. Executing DEMINOUT pass (demote inout ports to input or output).

2.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~2 debug messages>

2.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 1 unused cells and 47 unused wires.
<suppressed ~2 debug messages>

2.9. Executing CHECK pass (checking for obvious problems).
checking module top..
found and reported 0 problems.

2.10. Executing OPT pass (performing simple optimizations).

2.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

2.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.10.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 2 unused wires.
<suppressed ~2 debug messages>

2.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.10.9. Finished OPT passes. (There is nothing left to do.)

2.11. Executing WREDUCE pass (reducing word size of cells).
Removed top 5 bits (of 32) from port B of cell top.$techmap\pulser.strobe.$eq$top.v:197$30 ($eq).
Removed top 31 bits (of 32) from port B of cell top.$techmap\pulser.strobe.$add$top.v:195$29 ($add).
Removed top 7 bits (of 32) from port B of cell top.$techmap\pulser.shot.$eq$top.v:116$16 ($eq).
Removed top 31 bits (of 32) from port B of cell top.$techmap\pulser.shot.$add$top.v:113$15 ($add).

2.12. Executing PEEPOPT pass (run peephole optimizers).

2.13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.14. Executing SHARE pass (SAT-based resource sharing).

2.15. Executing TECHMAP pass (map to technology primitives).

2.15.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

2.15.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~36 debug messages>

2.16. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module top:
  creating $macc model for $techmap\pulser.shot.$add$top.v:113$15 ($add).
  creating $macc model for $techmap\pulser.strobe.$add$top.v:195$29 ($add).
  creating $alu model for $macc $techmap\pulser.strobe.$add$top.v:195$29.
  creating $alu model for $macc $techmap\pulser.shot.$add$top.v:113$15.
  creating $alu cell for $techmap\pulser.shot.$add$top.v:113$15: $auto$alumacc.cc:474:replace_alu$62
  creating $alu cell for $techmap\pulser.strobe.$add$top.v:195$29: $auto$alumacc.cc:474:replace_alu$65
  created 2 $alu and 0 $macc cells.

2.19. Executing OPT pass (performing simple optimizations).

2.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.19.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.19.9. Finished OPT passes. (There is nothing left to do.)

2.20. Executing FSM pass (extract and optimize FSM).

2.20.1. Executing FSM_DETECT pass (finding FSMs in design).

2.20.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.20.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.20.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.20.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.20.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.20.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.20.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.21. Executing OPT pass (performing simple optimizations).

2.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.21.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.21.5. Finished fast OPT passes.

2.22. Executing MEMORY pass.

2.22.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

2.22.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.22.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.22.5. Executing MEMORY_COLLECT pass (generating $mem cells).

2.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.24. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

2.25. Executing TECHMAP pass (map to technology primitives).

2.25.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M0'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M123'.
Successfully finished Verilog frontend.

2.25.2. Continuing TECHMAP pass.
No more expansions possible.

2.26. Executing ICE40_BRAMINIT pass.

2.27. Executing OPT pass (performing simple optimizations).

2.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.27.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.27.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.27.5. Finished fast OPT passes.

2.28. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

2.29. Executing OPT pass (performing simple optimizations).

2.29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.29.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

2.29.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
    Consolidated identical input bits for $mux cell $procmux$57:
      Old ports: A=8'00000000, B=8'10101010, Y=\leds
      New ports: A=1'0, B=1'1, Y=\leds [1]
      New connections: { \leds [7:2] \leds [0] } = { \leds [1] 1'0 \leds [1] 1'0 \leds [1] 2'00 }
  Optimizing cells in module \top.
Performed a total of 1 changes.

2.29.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.29.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.29.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.29.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.29.9. Rerunning OPT passes. (Maybe there is more to do..)

2.29.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

2.29.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.29.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.29.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.29.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.29.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.29.16. Finished OPT passes. (There is nothing left to do.)

2.30. Executing TECHMAP pass (map to technology primitives).

2.30.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.30.2. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

2.30.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $eq.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $pos.
No more expansions possible.
<suppressed ~38 debug messages>

2.31. Executing ICE40_OPT pass (performing simple optimizations).

2.31.1. Running ICE40 specific optimizations.

2.31.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~232 debug messages>

2.31.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.31.4. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 69 unused cells and 40 unused wires.
<suppressed ~74 debug messages>

2.31.6. Rerunning OPT passes. (Removed registers in this run.)

2.31.7. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell top.$auto$alumacc.cc:474:replace_alu$62.slice[0].carry: CO=\pulser.shot.counter.q [0]
Optimized away SB_CARRY cell top.$auto$alumacc.cc:474:replace_alu$65.slice[0].carry: CO=\pulser.strobe.counter.q [0]
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$62.slice[1].adder back to logic.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$65.slice[1].adder back to logic.

2.31.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~26 debug messages>

2.31.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.31.10. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

2.31.12. Rerunning OPT passes. (Removed registers in this run.)

2.31.13. Running ICE40 specific optimizations.

2.31.14. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.31.15. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.31.16. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.31.18. Finished OPT passes. (There is nothing left to do.)

2.32. Executing DFFSR2DFF pass (mapping DFFSR cells to simpler FFs).

2.33. Executing DFF2DFFE pass (transform $dff to $dffe where applicable).
Selected cell types for direct conversion:
  $_DFF_PP1_ -> $__DFFE_PP1
  $_DFF_PP0_ -> $__DFFE_PP0
  $_DFF_PN1_ -> $__DFFE_PN1
  $_DFF_PN0_ -> $__DFFE_PN0
  $_DFF_NP1_ -> $__DFFE_NP1
  $_DFF_NP0_ -> $__DFFE_NP0
  $_DFF_NN1_ -> $__DFFE_NN1
  $_DFF_NN0_ -> $__DFFE_NN0
  $_DFF_N_ -> $_DFFE_NP_
  $_DFF_P_ -> $_DFFE_PP_
Transforming FF to FF+Enable cells in module top:
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$370 to $_DFFE_PP_ for \pulser.strobe.counter.d [1] -> \pulser.strobe.counter.q [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$401 to $_DFFE_PP_ for \pulser.shot.state.d -> \pulser.shot.state.q.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$402 to $_DFFE_PP_ for \pulser.shot.counter.d [0] -> \pulser.shot.counter.q [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$403 to $_DFFE_PP_ for \pulser.shot.counter.d [1] -> \pulser.shot.counter.q [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$404 to $_DFFE_PP_ for \pulser.shot.counter.d [2] -> \pulser.shot.counter.q [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$405 to $_DFFE_PP_ for \pulser.shot.counter.d [3] -> \pulser.shot.counter.q [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$406 to $_DFFE_PP_ for \pulser.shot.counter.d [4] -> \pulser.shot.counter.q [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$407 to $_DFFE_PP_ for \pulser.shot.counter.d [5] -> \pulser.shot.counter.q [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$408 to $_DFFE_PP_ for \pulser.shot.counter.d [6] -> \pulser.shot.counter.q [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$409 to $_DFFE_PP_ for \pulser.shot.counter.d [7] -> \pulser.shot.counter.q [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$410 to $_DFFE_PP_ for \pulser.shot.counter.d [8] -> \pulser.shot.counter.q [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$411 to $_DFFE_PP_ for \pulser.shot.counter.d [9] -> \pulser.shot.counter.q [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$412 to $_DFFE_PP_ for \pulser.shot.counter.d [10] -> \pulser.shot.counter.q [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$413 to $_DFFE_PP_ for \pulser.shot.counter.d [11] -> \pulser.shot.counter.q [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$414 to $_DFFE_PP_ for \pulser.shot.counter.d [12] -> \pulser.shot.counter.q [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$415 to $_DFFE_PP_ for \pulser.shot.counter.d [13] -> \pulser.shot.counter.q [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$416 to $_DFFE_PP_ for \pulser.shot.counter.d [14] -> \pulser.shot.counter.q [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$417 to $_DFFE_PP_ for \pulser.shot.counter.d [15] -> \pulser.shot.counter.q [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$418 to $_DFFE_PP_ for \pulser.shot.counter.d [16] -> \pulser.shot.counter.q [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$419 to $_DFFE_PP_ for \pulser.shot.counter.d [17] -> \pulser.shot.counter.q [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$420 to $_DFFE_PP_ for \pulser.shot.counter.d [18] -> \pulser.shot.counter.q [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$421 to $_DFFE_PP_ for \pulser.shot.counter.d [19] -> \pulser.shot.counter.q [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$422 to $_DFFE_PP_ for \pulser.shot.counter.d [20] -> \pulser.shot.counter.q [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$423 to $_DFFE_PP_ for \pulser.shot.counter.d [21] -> \pulser.shot.counter.q [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$424 to $_DFFE_PP_ for \pulser.shot.counter.d [22] -> \pulser.shot.counter.q [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$425 to $_DFFE_PP_ for \pulser.shot.counter.d [23] -> \pulser.shot.counter.q [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$426 to $_DFFE_PP_ for \pulser.shot.counter.d [24] -> \pulser.shot.counter.q [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$427 to $_DFFE_PP_ for \pulser.shot.counter.d [25] -> \pulser.shot.counter.q [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$428 to $_DFFE_PP_ for \pulser.shot.counter.d [26] -> \pulser.shot.counter.q [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$429 to $_DFFE_PP_ for \pulser.shot.counter.d [27] -> \pulser.shot.counter.q [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$430 to $_DFFE_PP_ for \pulser.shot.counter.d [28] -> \pulser.shot.counter.q [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$431 to $_DFFE_PP_ for \pulser.shot.counter.d [29] -> \pulser.shot.counter.q [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$432 to $_DFFE_PP_ for \pulser.shot.counter.d [30] -> \pulser.shot.counter.q [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$433 to $_DFFE_PP_ for \pulser.shot.counter.d [31] -> \pulser.shot.counter.q [31].

2.34. Executing TECHMAP pass (map to technology primitives).

2.34.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Successfully finished Verilog frontend.

2.34.2. Continuing TECHMAP pass.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
No more expansions possible.
<suppressed ~65 debug messages>

2.35. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~70 debug messages>

2.36. Executing SIMPLEMAP pass (map simple cells to gate primitives).

2.37. Executing ICE40_FFINIT pass (implement FF init values).
Handling FF init values in top.
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$433 (SB_DFFE): \pulser.shot.counter.q [31] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$375 (SB_DFF): \pulser.strobe.counter.q [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$369 (SB_DFF): \pulser.strobe.counter.q [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$370 (SB_DFFE): \pulser.strobe.counter.q [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$371 (SB_DFF): \pulser.strobe.counter.q [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$372 (SB_DFF): \pulser.strobe.counter.q [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$373 (SB_DFF): \pulser.strobe.counter.q [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$408 (SB_DFFE): \pulser.shot.counter.q [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$374 (SB_DFF): \pulser.strobe.counter.q [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$376 (SB_DFF): \pulser.strobe.counter.q [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$378 (SB_DFF): \pulser.strobe.counter.q [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$379 (SB_DFF): \pulser.strobe.counter.q [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$380 (SB_DFF): \pulser.strobe.counter.q [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$381 (SB_DFF): \pulser.strobe.counter.q [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$382 (SB_DFF): \pulser.strobe.counter.q [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$383 (SB_DFF): \pulser.strobe.counter.q [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$384 (SB_DFF): \pulser.strobe.counter.q [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$385 (SB_DFF): \pulser.strobe.counter.q [16] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$386 (SB_DFF): \pulser.strobe.counter.q [17] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$387 (SB_DFF): \pulser.strobe.counter.q [18] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$388 (SB_DFF): \pulser.strobe.counter.q [19] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$389 (SB_DFF): \pulser.strobe.counter.q [20] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$390 (SB_DFF): \pulser.strobe.counter.q [21] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$391 (SB_DFF): \pulser.strobe.counter.q [22] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$392 (SB_DFF): \pulser.strobe.counter.q [23] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$393 (SB_DFF): \pulser.strobe.counter.q [24] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$394 (SB_DFF): \pulser.strobe.counter.q [25] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$395 (SB_DFF): \pulser.strobe.counter.q [26] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$396 (SB_DFF): \pulser.strobe.counter.q [27] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$397 (SB_DFF): \pulser.strobe.counter.q [28] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$398 (SB_DFF): \pulser.strobe.counter.q [29] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$399 (SB_DFF): \pulser.strobe.counter.q [30] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$400 (SB_DFF): \pulser.strobe.counter.q [31] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$410 (SB_DFFE): \pulser.shot.counter.q [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$402 (SB_DFFE): \pulser.shot.counter.q [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$403 (SB_DFFE): \pulser.shot.counter.q [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$404 (SB_DFFE): \pulser.shot.counter.q [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$405 (SB_DFFE): \pulser.shot.counter.q [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$406 (SB_DFFE): \pulser.shot.counter.q [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$377 (SB_DFF): \pulser.strobe.counter.q [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$407 (SB_DFFE): \pulser.shot.counter.q [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$401 (SB_DFFE): \pulser.shot.state.q = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$409 (SB_DFFE): \pulser.shot.counter.q [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$411 (SB_DFFE): \pulser.shot.counter.q [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$412 (SB_DFFE): \pulser.shot.counter.q [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$413 (SB_DFFE): \pulser.shot.counter.q [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$414 (SB_DFFE): \pulser.shot.counter.q [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$415 (SB_DFFE): \pulser.shot.counter.q [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$416 (SB_DFFE): \pulser.shot.counter.q [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$417 (SB_DFFE): \pulser.shot.counter.q [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$418 (SB_DFFE): \pulser.shot.counter.q [16] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$419 (SB_DFFE): \pulser.shot.counter.q [17] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$420 (SB_DFFE): \pulser.shot.counter.q [18] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$421 (SB_DFFE): \pulser.shot.counter.q [19] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$422 (SB_DFFE): \pulser.shot.counter.q [20] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$423 (SB_DFFE): \pulser.shot.counter.q [21] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$424 (SB_DFFE): \pulser.shot.counter.q [22] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$425 (SB_DFFE): \pulser.shot.counter.q [23] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$426 (SB_DFFE): \pulser.shot.counter.q [24] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$427 (SB_DFFE): \pulser.shot.counter.q [25] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$428 (SB_DFFE): \pulser.shot.counter.q [26] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$429 (SB_DFFE): \pulser.shot.counter.q [27] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$430 (SB_DFFE): \pulser.shot.counter.q [28] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$431 (SB_DFFE): \pulser.shot.counter.q [29] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$432 (SB_DFFE): \pulser.shot.counter.q [30] = 0

2.38. Executing ICE40_FFSSR pass (merge synchronous set/reset into FF cells).
Merging set/reset $_MUX_ cells into SB_FFs in top.
  Merging $auto$simplemap.cc:277:simplemap_mux$259 (A=1'0, B=$techmap\pulser.shot.$add$top.v:113$15_Y [31], S=$auto$simplemap.cc:256:simplemap_eqne$185) into $auto$simplemap.cc:420:simplemap_dff$433 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$125 (A=1'0, B=$techmap\pulser.strobe.$1\counter$d[31:0]$28 [6], S=$auto$simplemap.cc:256:simplemap_eqne$185) into $auto$simplemap.cc:420:simplemap_dff$375 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$119 (A=1'1, B=$techmap\pulser.strobe.$1\counter$d[31:0]$28 [0], S=$auto$simplemap.cc:256:simplemap_eqne$185) into $auto$simplemap.cc:420:simplemap_dff$369 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$120 (A=1'0, B=$auto$simplemap.cc:309:simplemap_lut$659 [1], S=$auto$simplemap.cc:256:simplemap_eqne$185) into $auto$simplemap.cc:420:simplemap_dff$370 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$121 (A=1'0, B=$techmap\pulser.strobe.$1\counter$d[31:0]$28 [2], S=$auto$simplemap.cc:256:simplemap_eqne$185) into $auto$simplemap.cc:420:simplemap_dff$371 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$122 (A=1'0, B=$techmap\pulser.strobe.$1\counter$d[31:0]$28 [3], S=$auto$simplemap.cc:256:simplemap_eqne$185) into $auto$simplemap.cc:420:simplemap_dff$372 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$123 (A=1'0, B=$techmap\pulser.strobe.$1\counter$d[31:0]$28 [4], S=$auto$simplemap.cc:256:simplemap_eqne$185) into $auto$simplemap.cc:420:simplemap_dff$373 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$234 (A=1'0, B=$techmap\pulser.shot.$add$top.v:113$15_Y [6], S=$auto$simplemap.cc:256:simplemap_eqne$185) into $auto$simplemap.cc:420:simplemap_dff$408 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$124 (A=1'0, B=$techmap\pulser.strobe.$1\counter$d[31:0]$28 [5], S=$auto$simplemap.cc:256:simplemap_eqne$185) into $auto$simplemap.cc:420:simplemap_dff$374 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$126 (A=1'0, B=$techmap\pulser.strobe.$1\counter$d[31:0]$28 [7], S=$auto$simplemap.cc:256:simplemap_eqne$185) into $auto$simplemap.cc:420:simplemap_dff$376 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$128 (A=1'0, B=$techmap\pulser.strobe.$1\counter$d[31:0]$28 [9], S=$auto$simplemap.cc:256:simplemap_eqne$185) into $auto$simplemap.cc:420:simplemap_dff$378 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$129 (A=1'0, B=$techmap\pulser.strobe.$1\counter$d[31:0]$28 [10], S=$auto$simplemap.cc:256:simplemap_eqne$185) into $auto$simplemap.cc:420:simplemap_dff$379 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$130 (A=1'0, B=$techmap\pulser.strobe.$1\counter$d[31:0]$28 [11], S=$auto$simplemap.cc:256:simplemap_eqne$185) into $auto$simplemap.cc:420:simplemap_dff$380 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$131 (A=1'0, B=$techmap\pulser.strobe.$1\counter$d[31:0]$28 [12], S=$auto$simplemap.cc:256:simplemap_eqne$185) into $auto$simplemap.cc:420:simplemap_dff$381 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$132 (A=1'0, B=$techmap\pulser.strobe.$1\counter$d[31:0]$28 [13], S=$auto$simplemap.cc:256:simplemap_eqne$185) into $auto$simplemap.cc:420:simplemap_dff$382 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$133 (A=1'0, B=$techmap\pulser.strobe.$1\counter$d[31:0]$28 [14], S=$auto$simplemap.cc:256:simplemap_eqne$185) into $auto$simplemap.cc:420:simplemap_dff$383 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$134 (A=1'0, B=$techmap\pulser.strobe.$1\counter$d[31:0]$28 [15], S=$auto$simplemap.cc:256:simplemap_eqne$185) into $auto$simplemap.cc:420:simplemap_dff$384 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$135 (A=1'0, B=$techmap\pulser.strobe.$1\counter$d[31:0]$28 [16], S=$auto$simplemap.cc:256:simplemap_eqne$185) into $auto$simplemap.cc:420:simplemap_dff$385 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$136 (A=1'0, B=$techmap\pulser.strobe.$1\counter$d[31:0]$28 [17], S=$auto$simplemap.cc:256:simplemap_eqne$185) into $auto$simplemap.cc:420:simplemap_dff$386 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$137 (A=1'0, B=$techmap\pulser.strobe.$1\counter$d[31:0]$28 [18], S=$auto$simplemap.cc:256:simplemap_eqne$185) into $auto$simplemap.cc:420:simplemap_dff$387 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$138 (A=1'0, B=$techmap\pulser.strobe.$1\counter$d[31:0]$28 [19], S=$auto$simplemap.cc:256:simplemap_eqne$185) into $auto$simplemap.cc:420:simplemap_dff$388 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$139 (A=1'0, B=$techmap\pulser.strobe.$1\counter$d[31:0]$28 [20], S=$auto$simplemap.cc:256:simplemap_eqne$185) into $auto$simplemap.cc:420:simplemap_dff$389 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$140 (A=1'0, B=$techmap\pulser.strobe.$1\counter$d[31:0]$28 [21], S=$auto$simplemap.cc:256:simplemap_eqne$185) into $auto$simplemap.cc:420:simplemap_dff$390 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$141 (A=1'0, B=$techmap\pulser.strobe.$1\counter$d[31:0]$28 [22], S=$auto$simplemap.cc:256:simplemap_eqne$185) into $auto$simplemap.cc:420:simplemap_dff$391 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$142 (A=1'0, B=$techmap\pulser.strobe.$1\counter$d[31:0]$28 [23], S=$auto$simplemap.cc:256:simplemap_eqne$185) into $auto$simplemap.cc:420:simplemap_dff$392 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$143 (A=1'0, B=$techmap\pulser.strobe.$1\counter$d[31:0]$28 [24], S=$auto$simplemap.cc:256:simplemap_eqne$185) into $auto$simplemap.cc:420:simplemap_dff$393 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$144 (A=1'0, B=$techmap\pulser.strobe.$1\counter$d[31:0]$28 [25], S=$auto$simplemap.cc:256:simplemap_eqne$185) into $auto$simplemap.cc:420:simplemap_dff$394 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$145 (A=1'0, B=$techmap\pulser.strobe.$1\counter$d[31:0]$28 [26], S=$auto$simplemap.cc:256:simplemap_eqne$185) into $auto$simplemap.cc:420:simplemap_dff$395 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$146 (A=1'0, B=$techmap\pulser.strobe.$1\counter$d[31:0]$28 [27], S=$auto$simplemap.cc:256:simplemap_eqne$185) into $auto$simplemap.cc:420:simplemap_dff$396 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$147 (A=1'0, B=$techmap\pulser.strobe.$1\counter$d[31:0]$28 [28], S=$auto$simplemap.cc:256:simplemap_eqne$185) into $auto$simplemap.cc:420:simplemap_dff$397 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$148 (A=1'0, B=$techmap\pulser.strobe.$1\counter$d[31:0]$28 [29], S=$auto$simplemap.cc:256:simplemap_eqne$185) into $auto$simplemap.cc:420:simplemap_dff$398 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$149 (A=1'0, B=$techmap\pulser.strobe.$1\counter$d[31:0]$28 [30], S=$auto$simplemap.cc:256:simplemap_eqne$185) into $auto$simplemap.cc:420:simplemap_dff$399 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$150 (A=1'0, B=$techmap\pulser.strobe.$1\counter$d[31:0]$28 [31], S=$auto$simplemap.cc:256:simplemap_eqne$185) into $auto$simplemap.cc:420:simplemap_dff$400 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$236 (A=1'0, B=$techmap\pulser.shot.$add$top.v:113$15_Y [8], S=$auto$simplemap.cc:256:simplemap_eqne$185) into $auto$simplemap.cc:420:simplemap_dff$410 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$228 (A=1'0, B=$techmap\pulser.shot.$add$top.v:113$15_Y [0], S=$auto$simplemap.cc:256:simplemap_eqne$185) into $auto$simplemap.cc:420:simplemap_dff$402 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$229 (A=1'0, B=$auto$simplemap.cc:309:simplemap_lut$640 [1], S=$auto$simplemap.cc:256:simplemap_eqne$185) into $auto$simplemap.cc:420:simplemap_dff$403 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$230 (A=1'0, B=$techmap\pulser.shot.$add$top.v:113$15_Y [2], S=$auto$simplemap.cc:256:simplemap_eqne$185) into $auto$simplemap.cc:420:simplemap_dff$404 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$231 (A=1'0, B=$techmap\pulser.shot.$add$top.v:113$15_Y [3], S=$auto$simplemap.cc:256:simplemap_eqne$185) into $auto$simplemap.cc:420:simplemap_dff$405 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$232 (A=1'0, B=$techmap\pulser.shot.$add$top.v:113$15_Y [4], S=$auto$simplemap.cc:256:simplemap_eqne$185) into $auto$simplemap.cc:420:simplemap_dff$406 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$127 (A=1'0, B=$techmap\pulser.strobe.$1\counter$d[31:0]$28 [8], S=$auto$simplemap.cc:256:simplemap_eqne$185) into $auto$simplemap.cc:420:simplemap_dff$377 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$233 (A=1'0, B=$techmap\pulser.shot.$add$top.v:113$15_Y [5], S=$auto$simplemap.cc:256:simplemap_eqne$185) into $auto$simplemap.cc:420:simplemap_dff$407 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$235 (A=1'0, B=$techmap\pulser.shot.$add$top.v:113$15_Y [7], S=$auto$simplemap.cc:256:simplemap_eqne$185) into $auto$simplemap.cc:420:simplemap_dff$409 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$237 (A=1'0, B=$techmap\pulser.shot.$add$top.v:113$15_Y [9], S=$auto$simplemap.cc:256:simplemap_eqne$185) into $auto$simplemap.cc:420:simplemap_dff$411 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$238 (A=1'0, B=$techmap\pulser.shot.$add$top.v:113$15_Y [10], S=$auto$simplemap.cc:256:simplemap_eqne$185) into $auto$simplemap.cc:420:simplemap_dff$412 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$239 (A=1'0, B=$techmap\pulser.shot.$add$top.v:113$15_Y [11], S=$auto$simplemap.cc:256:simplemap_eqne$185) into $auto$simplemap.cc:420:simplemap_dff$413 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$240 (A=1'0, B=$techmap\pulser.shot.$add$top.v:113$15_Y [12], S=$auto$simplemap.cc:256:simplemap_eqne$185) into $auto$simplemap.cc:420:simplemap_dff$414 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$241 (A=1'0, B=$techmap\pulser.shot.$add$top.v:113$15_Y [13], S=$auto$simplemap.cc:256:simplemap_eqne$185) into $auto$simplemap.cc:420:simplemap_dff$415 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$242 (A=1'0, B=$techmap\pulser.shot.$add$top.v:113$15_Y [14], S=$auto$simplemap.cc:256:simplemap_eqne$185) into $auto$simplemap.cc:420:simplemap_dff$416 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$243 (A=1'0, B=$techmap\pulser.shot.$add$top.v:113$15_Y [15], S=$auto$simplemap.cc:256:simplemap_eqne$185) into $auto$simplemap.cc:420:simplemap_dff$417 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$244 (A=1'0, B=$techmap\pulser.shot.$add$top.v:113$15_Y [16], S=$auto$simplemap.cc:256:simplemap_eqne$185) into $auto$simplemap.cc:420:simplemap_dff$418 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$245 (A=1'0, B=$techmap\pulser.shot.$add$top.v:113$15_Y [17], S=$auto$simplemap.cc:256:simplemap_eqne$185) into $auto$simplemap.cc:420:simplemap_dff$419 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$246 (A=1'0, B=$techmap\pulser.shot.$add$top.v:113$15_Y [18], S=$auto$simplemap.cc:256:simplemap_eqne$185) into $auto$simplemap.cc:420:simplemap_dff$420 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$247 (A=1'0, B=$techmap\pulser.shot.$add$top.v:113$15_Y [19], S=$auto$simplemap.cc:256:simplemap_eqne$185) into $auto$simplemap.cc:420:simplemap_dff$421 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$248 (A=1'0, B=$techmap\pulser.shot.$add$top.v:113$15_Y [20], S=$auto$simplemap.cc:256:simplemap_eqne$185) into $auto$simplemap.cc:420:simplemap_dff$422 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$249 (A=1'0, B=$techmap\pulser.shot.$add$top.v:113$15_Y [21], S=$auto$simplemap.cc:256:simplemap_eqne$185) into $auto$simplemap.cc:420:simplemap_dff$423 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$250 (A=1'0, B=$techmap\pulser.shot.$add$top.v:113$15_Y [22], S=$auto$simplemap.cc:256:simplemap_eqne$185) into $auto$simplemap.cc:420:simplemap_dff$424 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$251 (A=1'0, B=$techmap\pulser.shot.$add$top.v:113$15_Y [23], S=$auto$simplemap.cc:256:simplemap_eqne$185) into $auto$simplemap.cc:420:simplemap_dff$425 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$252 (A=1'0, B=$techmap\pulser.shot.$add$top.v:113$15_Y [24], S=$auto$simplemap.cc:256:simplemap_eqne$185) into $auto$simplemap.cc:420:simplemap_dff$426 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$253 (A=1'0, B=$techmap\pulser.shot.$add$top.v:113$15_Y [25], S=$auto$simplemap.cc:256:simplemap_eqne$185) into $auto$simplemap.cc:420:simplemap_dff$427 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$254 (A=1'0, B=$techmap\pulser.shot.$add$top.v:113$15_Y [26], S=$auto$simplemap.cc:256:simplemap_eqne$185) into $auto$simplemap.cc:420:simplemap_dff$428 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$255 (A=1'0, B=$techmap\pulser.shot.$add$top.v:113$15_Y [27], S=$auto$simplemap.cc:256:simplemap_eqne$185) into $auto$simplemap.cc:420:simplemap_dff$429 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$256 (A=1'0, B=$techmap\pulser.shot.$add$top.v:113$15_Y [28], S=$auto$simplemap.cc:256:simplemap_eqne$185) into $auto$simplemap.cc:420:simplemap_dff$430 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$257 (A=1'0, B=$techmap\pulser.shot.$add$top.v:113$15_Y [29], S=$auto$simplemap.cc:256:simplemap_eqne$185) into $auto$simplemap.cc:420:simplemap_dff$431 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$258 (A=1'0, B=$techmap\pulser.shot.$add$top.v:113$15_Y [30], S=$auto$simplemap.cc:256:simplemap_eqne$185) into $auto$simplemap.cc:420:simplemap_dff$432 (SB_DFFE).

2.39. Executing ICE40_OPT pass (performing simple optimizations).

2.39.1. Running ICE40 specific optimizations.

2.39.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~63 debug messages>

2.39.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~387 debug messages>
Removed a total of 129 cells.

2.39.4. Executing OPT_RMDFF pass (remove dff with constant values).

2.39.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 64 unused cells and 401 unused wires.
<suppressed ~69 debug messages>

2.39.6. Rerunning OPT passes. (Removed registers in this run.)

2.39.7. Running ICE40 specific optimizations.

2.39.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.39.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.39.10. Executing OPT_RMDFF pass (remove dff with constant values).

2.39.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.39.12. Finished OPT passes. (There is nothing left to do.)

2.40. Executing TECHMAP pass (map to technology primitives).

2.40.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

2.40.2. Continuing TECHMAP pass.
No more expansions possible.

2.41. Executing ABC pass (technology mapping using ABC).

2.41.1. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Extracted 99 gates and 165 wires to a netlist network with 65 inputs and 7 outputs.

2.41.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =      12.
ABC: Participating nodes from both networks       =      25.
ABC: Participating nodes from the first network   =      11. (  39.29 % of nodes)
ABC: Participating nodes from the second network  =      14. (  50.00 % of nodes)
ABC: Node pairs (any polarity)                    =      11. (  39.29 % of names can be moved)
ABC: Node pairs (same polarity)                   =       7. (  25.00 % of names can be moved)
ABC: Total runtime =     0.03 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

2.41.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:       54
ABC RESULTS:        internal signals:       93
ABC RESULTS:           input signals:       65
ABC RESULTS:          output signals:        7
Removing temp directory.
Removed 0 unused cells and 90 unused wires.

2.42. Executing TECHMAP pass (map to technology primitives).

2.42.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

2.42.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=1\LUT=2'01 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111110000000 for cells of type $lut.
No more expansions possible.
<suppressed ~115 debug messages>
Removed 0 unused cells and 54 unused wires.

2.43. Executing HIERARCHY pass (managing design hierarchy).

2.43.1. Analyzing design hierarchy..
Top module:  \top

2.43.2. Analyzing design hierarchy..
Top module:  \top
Removed 0 unused modules.

2.44. Printing statistics.

=== top ===

   Number of wires:                 60
   Number of wire bits:            315
   Number of public wires:          30
   Number of public wire bits:     161
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                214
     SB_CARRY                       60
     SB_DFFE                         1
     SB_DFFESR                      33
     SB_DFFSR                       30
     SB_DFFSS                        1
     SB_LUT4                        89

2.45. Executing CHECK pass (checking for obvious problems).
checking module top..
found and reported 0 problems.

2.46. Executing JSON backend.

End of script. Logfile hash: ccbff433d9
CPU: user 0.29s system 0.02s, MEM: 45.92 MB total, 39.89 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 31% 10x read_verilog (0 sec), 15% 18x opt_clean (0 sec), ...
